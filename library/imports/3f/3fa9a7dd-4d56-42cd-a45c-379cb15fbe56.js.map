{"version":3,"sources":["../../../../../../../assets/lcGame/scripts/layers/logic/assets/lcGame/scripts/layers/logic/lc_logic_chance.js"],"names":["cc","Class","extends","tm","GameWapper","properties","_curEle","_selectList","_crashList","mixCount","onLoad","_super","changeCurEle","ele","playEleEffect","push","isSame","find","value","length","last","_checkIsSamePos","_popLastEle","eleA","eleB","flag","logicX","logicY","checkIsSamePos","pop","stopEleEffect","trigger","lc","Event","GameEvent","HideLastLine","isSameType","checkIsSameType","LOGD","checkIsInArea","removeSelectList","isRemove","_cleanSelectList","forEach","onBeat","addCrashedContainer","onCrashedContainer","tmpList","i","one","onCrashed","getCurEle"],"mappings":";;;;;;AAAA;;;;AAIAA,GAAGC,KAAH,CAAS;AACLC,aAASC,GAAGC,UADP;;AAGLC,gBAAY;AACRC,iBAAS,IADD,EACO;AACfC,qBAAa,EAFL,EAES;AACjBC,oBAAY,EAHJ,EAGQ;AAChBC,kBAAU,CAJF,CAIK;AAJL,KAHP;;AAULC,UAVK,oBAUK;AACN,aAAKC,MAAL;AACH,KAZI;;;AAcL;;;;AAIAC,gBAlBK,wBAkBSC,GAlBT,EAkBc;AACf,aAAKC,aAAL,CAAmBD,GAAnB;AACA,aAAKP,OAAL,GAAeO,GAAf;AACA,aAAKN,WAAL,CAAiBQ,IAAjB,CAAsBF,GAAtB;AACH,KAtBI;;;AAwBL;;;;;AAKAG,YAAQ,gBAAUH,GAAV,EAAe;AACnB,YAAG,KAAKN,WAAL,CAAiBU,IAAjB,CAAsB,UAASC,KAAT,EAAe;AACpC,mBAAOA,UAAUL,GAAjB;AACH,SAFE,CAAH,EAEG;AACC,gBAAG,KAAKN,WAAL,CAAiBY,MAAjB,GAA0B,CAA7B,EAAgC;AAC5B,oBAAIC,OAAO,KAAKb,WAAL,CAAiB,KAAKA,WAAL,CAAiBY,MAAjB,GAA0B,CAA3C,CAAX;AACA,oBAAGC,IAAH,EAAS;AACL,wBAAI,KAAKC,eAAL,CAAqBD,IAArB,EAA2BP,GAA3B,CAAJ,EAAqC;AACjC,6BAAKS,WAAL;AACH;AACJ;AACJ;;AAED,mBAAO,IAAP;AACH;;AAED,eAAO,KAAP;AACH,KA9CI;;AAgDL;;;;AAIAD,qBAAiB,yBAAUE,IAAV,EAAgBC,IAAhB,EAAsB;AACnC,YAAIC,OAAO,KAAX;AACA,YAAGF,QAAQC,IAAX,EAAiB;AACb,gBAAIE,SAASH,KAAKG,MAAlB;AACA,gBAAIC,SAASJ,KAAKI,MAAlB;AACAF,mBAAOD,KAAKI,cAAL,CAAoBF,MAApB,EAA4BC,MAA5B,CAAP;AACH;;AAED,eAAOF,IAAP;AACH,KA7DI;;AA+DL;;;;AAIAH,iBAAa,uBAAY;AACrB,YAAIT,MAAM,KAAKN,WAAL,CAAiBsB,GAAjB,EAAV;AACA,YAAGhB,GAAH,EAAQ;AACJ,iBAAKiB,aAAL,CAAmBjB,GAAnB;AACH;;AAEDA,cAAM,KAAKN,WAAL,CAAiB,KAAKA,WAAL,CAAiBY,MAAjB,GAA0B,CAA3C,CAAN;AACA,YAAGN,GAAH,EAAQ;AACJ,iBAAKP,OAAL,GAAeO,GAAf;AACA,iBAAKkB,OAAL,CAAaC,GAAGC,KAAH,CAASC,SAAT,CAAmBC,YAAhC;AACH;AACJ,KA9EI;;AAgFL;;;AAGAC,gBAAY,oBAAUvB,GAAV,EAAc;AACtB,YAAIY,OAAO,KAAX;AACA,YAAG,KAAKnB,OAAR,EAAgB;AACZ,gBAAGO,IAAIwB,eAAJ,CAAoB,KAAK/B,OAAzB,CAAH,EAAqC;AACjCH,mBAAGmC,IAAH,CAAQ,UAAR;AACAb,uBAAO,IAAP;AACH;AACJ,SALD,MAKO;AACHtB,eAAGmC,IAAH,CAAQ,WAAR;AACH;;AAED,eAAOb,IAAP;AACH,KA/FI;;AAiGL;;;;;AAKAc,mBAAe,uBAAW1B,GAAX,EAAgB;AAC3B,YAAIY,OAAO,KAAX;AACA,YAAG,KAAKnB,OAAR,EAAgB;AACZ,gBAAGO,IAAI0B,aAAJ,CAAkB,KAAKjC,OAAvB,CAAH,EAAmC;AAC/BH,mBAAGmC,IAAH,CAAQ,MAAR;AACAb,uBAAO,IAAP;AACH;AACJ,SALD,MAKO;AACHtB,eAAGmC,IAAH,CAAQ,WAAR;AACH;;AAED,eAAOb,IAAP;AACH,KAlHI;;AAoHL;;;AAGAe,sBAAkB,4BAAY;AAC1B,YAAIC,WAAW,KAAKlC,WAAL,CAAiBY,MAAjB,IAA2B,KAAKV,QAAhC,GAA2C,IAA3C,GAAkD,KAAjE;AACA,YAAGgC,QAAH,EAAa;AACV,iBAAKC,gBAAL,CAAsBD,QAAtB;AACF;AACJ,KA5HI;;AA8HLC,oBA9HK,4BA8HaD,QA9Hb,EA8HuB;AACxB,aAAKlC,WAAL,CAAiBoC,OAAjB,CAAyB,UAACzB,KAAD,EAAW;AAChC,gBAAGuB,QAAH,EAAa;AACTvB,sBAAM0B,MAAN;AACH;AACJ,SAJD;;AAMA,aAAKrC,WAAL,CAAiBY,MAAjB,GAA0B,CAA1B;AACH,KAtII;;;AAwIL;;;;AAIA0B,uBA5IK,+BA4IgBhC,GA5IhB,EA4IqB;AACtB,YAAGA,GAAH,EAAQ;AACJ,iBAAKL,UAAL,CAAgBO,IAAhB,CAAqBF,GAArB;AACH;AACJ,KAhJI;;;AAkJL;;;;AAIAiC,sBAtJK,gCAsJgB;AACjB,YAAIC,UAAU,EAAd;AACA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKxC,UAAL,CAAgBW,MAApC,EAA4C6B,GAA5C,EAAiD;AAC7C,gBAAIC,MAAM,KAAKzC,UAAL,CAAgBwC,CAAhB,CAAV;AACAD,oBAAQhC,IAAR,CAAakC,GAAb;AACH;;AAED,aAAKzC,UAAL,CAAgBW,MAAhB,GAAyB,CAAzB;;AAEA4B,gBAAQJ,OAAR,CAAgB,UAACzB,KAAD,EAAW;AACvBA,kBAAMgC,SAAN;AACH,SAFD;AAGH,KAlKI;AAoKLC,aApKK,uBAoKQ;AACX,eAAO,KAAK7C,OAAZ;AACD,KAtKI;AAwKLQ,iBAxKK,yBAwKUD,GAxKV,EAwKe,CAEnB,CA1KI;AA4KLiB,iBA5KK,yBA4KUjB,GA5KV,EA4Ke,CAEnB;AA9KI,CAAT","file":"lc_logic_chance.js","sourceRoot":"../../../../../../../assets/lcGame/scripts/layers/logic","sourcesContent":["/**\n * 游戏逻辑 -- 选择逻辑\n *\n */\ncc.Class({\n    extends: tm.GameWapper,\n\n    properties: {\n        _curEle: null, // 当前选择的元素\n        _selectList: [], // 当前选择的所有\n        _crashList: [], // 爆炸列表\n        mixCount: 1, // 最小移除数量\n    },\n\n    onLoad () {\n        this._super();\n    },\n\n    /**\n     * 切换当前的元素\n     * @param ele\n     */\n    changeCurEle (ele) {\n        this.playEleEffect(ele);\n        this._curEle = ele;\n        this._selectList.push(ele);\n    },\n\n    /**\n     * 是否和已有列表中的最后一个是相同的\n     * @param gameEle\n     * @private\n     */\n    isSame: function (ele) {\n        if(this._selectList.find(function(value){\n            return value === ele;\n        })){\n            if(this._selectList.length > 1) {\n                let last = this._selectList[this._selectList.length - 2];\n                if(last) {\n                    if (this._checkIsSamePos(last, ele)) {\n                        this._popLastEle();\n                    }\n                }\n            }\n\n            return true;\n        }\n\n        return false;\n    },\n\n    /**\n     * 检测是否是同一个\n     * @private\n     */\n    _checkIsSamePos: function (eleA, eleB) {\n        let flag = false;\n        if(eleA && eleB) {\n            let logicX = eleA.logicX;\n            let logicY = eleA.logicY;\n            flag = eleB.checkIsSamePos(logicX, logicY);\n        }\n\n        return flag;\n    },\n\n    /**\n     * 弹出最后一个游戏元素\n     * @private\n     */\n    _popLastEle: function () {\n        let ele = this._selectList.pop();\n        if(ele) {\n            this.stopEleEffect(ele);\n        }\n\n        ele = this._selectList[this._selectList.length - 1];\n        if(ele) {\n            this._curEle = ele;\n            this.trigger(lc.Event.GameEvent.HideLastLine);\n        }\n    },\n\n    /**\n     * 是同一类型\n     */\n    isSameType: function (ele){\n        let flag = false;\n        if(this._curEle){\n            if(ele.checkIsSameType(this._curEle)){\n                tm.LOGD(\"同一种类型的格子\");\n                flag = true;\n            }\n        } else {\n            tm.LOGD(\"还没开始选择到格子\");\n        }\n\n        return flag;\n    },\n\n    /**\n     * 是否在区域内\n     * @param ele\n     * @returns {boolean}\n     */\n    checkIsInArea: function  (ele) {\n        let flag = false;\n        if(this._curEle){\n            if(ele.checkIsInArea(this._curEle)){\n                tm.LOGD(\"在区域内\");\n                flag = true;\n            }\n        } else {\n            tm.LOGD(\"还没开始选择到格子\");\n        }\n\n        return flag;\n    },\n\n    /**\n     * 移除选中的网格\n     */\n    removeSelectList: function () {\n        let isRemove = this._selectList.length >= this.mixCount ? true : false;\n        if(isRemove) {\n           this._cleanSelectList(isRemove);\n        }\n    },\n\n    _cleanSelectList (isRemove) {\n        this._selectList.forEach((value) => {\n            if(isRemove) {\n                value.onBeat();\n            }\n        });\n\n        this._selectList.length = 0;\n    },\n\n    /**\n     * 添加被被撞物体\n     * @param ele\n     */\n    addCrashedContainer (ele) {\n        if(ele) {\n            this._crashList.push(ele);\n        }\n    },\n\n    /**\n     * 触发被碰撞物体\n     * @param info\n     */\n    onCrashedContainer() {\n        let tmpList = [];\n        for (let i = 0; i < this._crashList.length; i++) {\n            let one = this._crashList[i];\n            tmpList.push(one)\n        }\n\n        this._crashList.length = 0;\n\n        tmpList.forEach((value) => {\n            value.onCrashed();\n        });\n    },\n\n    getCurEle () {\n      return this._curEle\n    },\n\n    playEleEffect (ele) {\n\n    },\n\n    stopEleEffect (ele) {\n\n    }\n\n\n\n});"]}