{"version":3,"sources":["tm_notifier_center.js"],"names":["NotifierCenter","events","observers","scope","handler","obs","i","tm","LOGE","name","eventName","checkOverlap","observer","push","arguments","length","ignoreScope","splice","params","ob","args","Array","prototype","slice","call","CC_DEBUG","apply","e","notifierCenter","trigger","Event","APP_CATCH"],"mappings":"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","file":"tm_notifier_center.js","sourceRoot":"../../../../../assets/commonScript/core","sourcesContent":["/**\n *\n *\n * 注意: 标记为Ref的对象为引用对象, 不要在这个类改变属性.\n *\n */\n\nclass NotifierCenter {\n\n    constructor() {\n        this.events = {};\n    }\n\n    /**\n     * 检查是否重复\n     * @param observers\n     * @param scope\n     * @param handler\n     * @returns {boolean}\n     */\n    checkOverlap(observers, scope, handler){\n        var obs = null;\n        for(var i = 0; obs = observers[i]; i++){\n            if(obs.scope == scope && obs.handler == handler){\n                tm.LOGE(false, '[tm.NotifierCenter] 消息重复注册:' + ' function:' + handler.name);\n                return true;\n            }\n        }\n\n        return false;\n    }\n    /**\n     * 添加观察者\n     * @param eventName\n     * @param handler\n     * @param scope\n     */\n    register  (eventName, handler, scope) {\n        if (typeof eventName != 'string' || typeof(handler) != 'function' || !scope) {\n            tm.LOGE(false, 'tm.NotifierCenter listen err: eName :' + eventName + 'handler:'+ handler + ' !scope : ' + scope);\n            return;\n        }\n\n        var observers = this.events[eventName] || [];\n\n        if(!this.checkOverlap(observers, scope, handler)){\n\n            var observer = {handler:handler,scope:scope};\n            observers.push(observer);\n\n            this.events[eventName] = observers;\n        }\n    }\n    /**\n     * 删除观察者\n     * @param eventName\n     * @param handler\n     * @param scope\n     */\n    ignore (eventName, handler, scope) {\n        if (arguments.length == 1){\n            this.ignoreScope(arguments[0]);\n            return;\n        }\n\n        if (typeof eventName != 'string' || typeof(handler) != 'function' || !scope) {\n            tm.LOGE(false, 'tm.NotifierCenter remove err: eName :' + eventName + 'handler:'+ handler + ' scope: ' + scope);\n            return;\n        }\n\n        //var observers = this.events[eventName],length = observers.length;\n        //if (!observers || length <= 0) {\n        //    return;\n        //}\n\n        var observers = this.events[eventName];\n        if (!observers) {\n            return;\n        }\n\n        var length = observers.length;\n        if (length <= 0) {\n            return;\n        }\n\n        for (var i = length - 1; i >= 0; i--) {\n            var obs = observers[i];\n            if (obs.scope == scope && obs.handler == handler) {\n                observers.splice(i,1);\n                break;\n            }\n        }\n    }\n\n    /**\n     * 触发事件\n     * @param eventName\n     * @param params\n     */\n    trigger (eventName, params) {\n\n        if (typeof eventName != 'string') {\n            tm.LOGE(false, 'tm.NotifierCenter trigger err: eventName :' + eventName );\n            return;\n        }\n\n        var obs = this.events[eventName],ob;\n        if (!obs) {\n            return;\n        }\n\n        var args = Array.prototype.slice.call(arguments, 1);\n        var length = obs.length;\n        for(var i = length - 1; i >= 0; i--){\n            var ob = obs[i];\n            if(ob){\n                if(CC_DEBUG) {\n                    ob.handler.apply(ob.scope, args);\n                } else {\n                    try {\n                        ob.handler.apply(ob.scope, args);\n                    }catch (e){\n                        tm.notifierCenter.trigger(tm.Event.APP_CATCH, e);\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * 删除scope相同的观察者\n     * @param scope\n     */\n    ignoreScope (scope) {\n        if(typeof scope  == 'string'){\n            tm.LOGE(false, 'ignoreScope parameter error');\n            return;\n        }\n\n        for (var eventName in this.events) {\n            var obs = this.events[eventName];\n            if (obs) {\n                var length = obs.length;\n                for(var i = length - 1; i >= 0; i--){\n                    var ob = obs[i];\n                    if(ob['scope'] == scope){\n                        obs.splice(i, 1);\n                    }\n                }\n            }\n        }\n\n    }\n\n    destroy(){\n        this.events = null;\n    }\n}\n\ntm.NotifierCenter = NotifierCenter;"]}